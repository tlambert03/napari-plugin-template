from pathlib import Path

import npe2
import numpy as np
import pytest

from {{ module_name }} import napari_get_reader


# tmp_path is a pytest fixture
@pytest.fixture
def sample_file(tmp_path):
    # write some fake data using your supported file format
    npy_file = str(tmp_path / "myfile.npy")
    original_data = np.random.rand(20, 20)
    np.save(npy_file, original_data)
    return npy_file


def test_reader(sample_file):
    """An example of how you might test your plugin."""

    # try to read it back in
    reader = napari_get_reader(sample_file)
    assert callable(reader)

    # make sure we're delivering the right format
    layer_data_list = reader(sample_file)
    assert isinstance(layer_data_list, list) and len(layer_data_list) > 0
    layer_data_tuple = layer_data_list[0]
    assert isinstance(layer_data_tuple, tuple) and len(layer_data_tuple) > 0

    # make sure it's the same as it started
    assert layer_data_tuple[0].shape == (20, 20)


def test_get_reader_pass():
    reader = napari_get_reader("fake.file")
    assert reader is None


def test_with_npe2(npe2pm, sample_file):
    """Test that the reader works as an npe2 plugin."""
    # register your manifest with a temporary mock plugin manager
    mf_path = str(Path(__file__).parent.parent / "napari.yaml")
    with npe2pm.tmp_plugin(manifest=mf_path) as my_plugin:
        layer_data = npe2.read(paths=[sample_file], plugin_name=my_plugin.name)
        assert isinstance(layer_data, list) and len(layer_data)
        assert layer_data[0][0].shape == (20, 20)
